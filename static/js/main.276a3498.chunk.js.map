{"version":3,"sources":["config/trigger.js","assets/images sync nonrecursive //.(png|jpe?g|svg)$","assets/images/blue_payout_correct_10.png","assets/images/blue_payout_correct_100.png","lib/utils.js","trials/countdown.js","config/main.js","lib/markup/stimuli.js","trials/instructions.js","lib/markup/photodiode.js","trials/welcome.js","trials/startCode.js","config/practice.js","timelines/preamble.js","trials/experimentStart.js","trials/experimentEnd.js","trials/fixation.js","lib/markup/fixation.js","lib/drawUtils.js","lib/taskUtils.js","trials/rewardProbability.js","trials/frameSpike.js","trials/choice.js","trials/costBenefits.js","trials/pressBalloon.js","trials/rewardFeedback.js","trials/cumulativeReward.js","trials/trialEnd.js","timelines/taskTrial.js","trials/breakScreen.js","timelines/breakTrial.js","timelines/taskBlock.js","trials/showPayment.js","trials/userId.js","trials/recordNow.js","config/experiment.js","trials/quizTrials.js","timelines/main.js","App.js","index.js"],"names":["module","exports","eventCodes","fixationStart","fixationEnd","rewardProbabilityStart","rewardProbabilityEnd","frameSpikeStart","frameSpikeEnd","costBenefitsStart","costBenefitsEnd","choiceStart","choiceEnd","pressBalloonStart","pressBalloonEnd","cumulativeRewardsStart","cumulativeRewardsEnd","rewardFeedbackStart","rewardFeedbackEnd","showPaymentStart","showPaymentEnd","trialFinishStart","trialFinishEnd","test_connect","open_task","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","r","sleep","ms","Promise","setTimeout","removeCursor","elementId","document","getElementById","classList","add","addCursor","remove","jitter50","base","offset","Math","floor","random","jitter","deepCopy","obj","JSON","parse","stringify","getTurkUniqueId","turkInfo","jsPsych","turk","workerId","assignmentId","buildCountdown","text","time","type","stimulus","trial_duration","response_ends_trial","timeline","_","val","prompt","on_load","x8","canvasSize","x2","canvasSettings","frameDimensions","frameXpos","frameYpos","frameLinecolor","balloonXpos","balloonYpos","spikeWidth","spikeRefHeight","spikeXpos","spikeYpos","textXpos","textYpos","rewProbXpos","rewProbYpos","lineHeight","balloonRadius","balloonBaseHeight","spiketopHeight","x17","inflateByHE","x75","inflateByNHE","MTURK","outsideTurk","AT_HOME","process","REACT_APP_AT_HOME","lang","require","mlang","merge","defaultBlockSettings","probs","value","effort","high_effort","get_reward","counterbalance","repeats_per_condition","is_practice","photodiode_active","num_breaks","baseStimulus","element","class_","welcomeScreenOne","instructions","welcome","choose_btwn_two_balloons","welcomeScreenTwo","pop_balloon_earn_money","points_to_bonus_conversion","cumulative_rewards","bluePracticeScreen","two_balloons","blue_balloon_points","blue_practice_pump","greenPracticeScreenOne","green_balloon_points","green_balloon_pop_time","greenPracticeScreenTwo","green_balloon_pump_bonus","greenPracticeScreenThree","green_practice_pump","realPracticeScreenOne","green_balloon_variable_points_pumps","blue_balloon_constant_points_pumps","wait_pump","realPracticeScreenTwo","reward_prob_variable","reward_prob_certain","realPracticeScreenThree","reward_prob_display_event","realPracticeScreenFour","pump_keys","choice_locked_in","readyScreen","ready","prePracticeInstructions","show_clickable_nav","pages","bluePracticeInstructions","greenPracticeInstructions","realPracticeInstructions","postPracticeInstructions","ipcRenderer","electron","window","photodiodeGhostBox","pdSpotEncode","taskCode","numBlinks","repeat_pulse_for","i","callback","$","css","pulse_for","send","large_window","continue","press","message","startCode","setting_up","practiceBlock1","practiceBlock2","practiceBlock3","console","log","preamble","experimentStart","task","name","choices","button","experimentEnd","duration","end","fixation","endCode","NO_KEYS","on_finish","data","drawText","ctx","cx","cy","langColor","color","font","fillStyle","fillText","drawEffort","points","pumpsRequired","text2","drawSpike","w","h","fillColor","lineColor","clear","save","strokeStyle","beginPath","clearRect","moveTo","lineTo","fill","closePath","drawBalloon","radius","scale","arc","PI","lineWidth","restore","addData","trialDetails","blockSettings","opts","timestamp","Date","now","trial_earnings","trial_cumulative_earnings","subtrial_type","canvasHTML","rewardProbability","probability","prob","async","func","done","innerHTML","canvas","querySelector","getContext","width","height","encode","frameSpike","spikeHeight","targetDist","canvasDraw","choice","valid_keys","timeWhenStarted","getTime","timer","setInterval","pluginAPI","cancelKeyboardResponse","keyboardListener","clearInterval","getKeyboardResponse","callback_function","info","key","returnObj","valid_responses","rt_method","persist","allow_held_key","costBenefits","pressBalloon","values","get","select","length","inflateBy","reward","computeReward","countPumps","round","hitSpike","balloonHeight","remaining","crash","inflate","rt","rts","push","popped","keys_pressed","rewardFeedback","rewards","last","toFixed","cumulativeReward","blockDetails","cumulative_reward","cumulative_rew","total","trialEnd","trialFinish","on_start","trial","taskTrial","start_time","breakScreen","break","breakTrial","countdown","post_break_resume","taskBlock","startingOpts","startingOptions","c","range","shuffle","flatten","eff","generateStartingOpts","block_earnings","optimal_earnings","continue_block","opt","breakInterval","iBreak","splice","showPayment","total_earnings","experimenterKey","amount","total_cumulative","payment","earned","parseFloat","experimenter","userId","userid","set","uniqueId","questions","patientId","responses","addProperties","patient_id","getUserId","recordNow","confirm_recording","begin_recording","name_eeg_file","effort_suffix","exptBlock1","quizOptions","quiz","answer_opts","true","false","blueOrGreen","blue","green","quizPrompts","more_pumps","reward_certainty_reach_spike","bonus_blue","bonus_green","total_shown","points_to_money","retake","quizRules","rules","shown_probability","shown_blue_green_on_screen","job","blue_req_20","green_vary_bonus","twenty_five_secs_green","bonus_green_spike","any_questions","confirm_understanding","options","required","ans_choices","answer","len","retakeFeedback","feedback","incorrect_response","review","reshowRules","quizTimeline","loop_function","prevAnswers","getLastTrialData","correctAnswers","slice","conditional_function","primaryTimeline","practice1","practice2","practice3","expt1","mturkTimeline","tl","psiturk","lodash","noConflict","PsiTurk","App","className","settings","on_data_update","recordTrialData","a","saveData","completeHIT","completePsiturk","React","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.276a3498.chunk.js","sourcesContent":["// NOTE - these event codes must match what is in public/config/trigger.js\nconst eventCodes = {\n\tfixationStart: 1, // this is fixation dot onset\n\tfixationEnd: 2, // this is fixation dot offset\n\trewardProbabilityStart: 10, // reward probability (50% or 100%) onset\n\trewardProbabilityEnd: 11, // reward probability (50% of 100%) offset\n\tframeSpikeStart: 20, // frame and spike onset\n\tframeSpikeEnd: 21, // frame and spike offset\n\tcostBenefitsStart: 30, // points and effort values for both options onset\n\tcostBenefitsEnd: 31, // points and effort values for both options offset\n\tchoiceStart: 40, // frame + spike + balloons, when participant can choose blue or green\n\tchoiceEnd: 41, // frame + spike + balloons offset, once participant has made a choice\n\tpressBalloonStart: 50, // once participant is able to pump the balloon by pressing a key\n\tpressBalloonEnd: 51, // once the balloon has popped (once 25 secs from pressBalloonStart is over)\n\tcumulativeRewardsStart: 60, // total points earned thus far onset\n\tcumulativeRewardsEnd: 61, // total points earned thus far offse\n\trewardFeedbackStart: 70, // trial reward feedback onset\n\trewardFeedbackEnd: 71, // trial reward feedback offset\n\tshowPaymentStart: 80, // end of task earnings screen onset\n\tshowPaymentEnd: 81, // end of task earnings screen offset\n\ttrialFinishStart: 90, // marks when trial starts (fixation onset)\n\ttrialFinishEnd: 91, // marks when trial ends (reward feedback offset)\n\ttest_connect: 4,\n\topen_task: 5 // when the app is opened, send this code\n}\n\n// this is module.exports isntead of just exports as it is also imported into the electron app\nmodule.exports = {\n\teventCodes\n}\n","var map = {\n\t\"./blue_payout_correct_10.png\": 24,\n\t\"./blue_payout_correct_100.png\": 25\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 23;","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_10.f515a81e.png\";","module.exports = __webpack_public_path__ + \"static/media/blue_payout_correct_100.ae2416c7.png\";","import { jsPsych } from 'jspsych-react'\nimport requireContext from 'require-context.macro'\n\nconst sleep = (ms) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// hide cursor on screen\nconst removeCursor = (elementId) => {\n  let element = document.getElementById(elementId);\n  element.classList.add(\"nocursor\");\n}\n\n// add cursor back on screen\nconst addCursor = (elementId) => {\n  let element = document.getElementById(elementId);\n  element.classList.remove(\"nocursor\");\n}\n\n// response time\nconst rt = (start) => Date.now() - start\n\n// add a random number between 0 and offset to the base number\nconst jitter = (base, offset) => (\n  base + Math.floor(Math.random() * Math.floor(offset))\n)\n\n// add a random number between 0 and 50 to the base number\nconst jitter50 = (base) => jitter(base, 50)\n\n// flip a coin\nconst randomTrue = () => Math.random() > 0.5\n\n// deeply copy an object\nconst deepCopy = (obj) => JSON.parse(JSON.stringify(obj))\n\n// format a number as a dollar amount\nconst formatDollars = (amount) => '$' + parseFloat(amount).toFixed(2)\n\n\n// create a pre-trial wait period\nconst generateWaitSet = (trial, waitTime) => {\n  let waitTrial = Object.assign({}, trial)\n  waitTrial.trial_duration = waitTime\n  waitTrial.response_ends_trial = false\n  waitTrial.prompt = '-'\n\n  return [waitTrial, trial]\n}\n\nconst keypressResponse = (info) => {\n  const data = {\n    key_press: info.key\n  }\n\n  jsPsych.finishTrial(data)\n}\n\nconst startKeypressListener = () => {\n  let keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n    callback_function: keypressResponse,\n    valid_responses: jsPsych.ALL_KEYS,\n    persist: false\n  })\n\n  return keyboardListener\n}\n\n// import images\nconst importAll = (r) => {\n  return r.keys().map(r);\n}\n\nconst images = importAll(requireContext('../assets/images', false, /\\.(png|jpe?g|svg)$/));\n\nconst getTurkUniqueId = () => {\n  const turkInfo = jsPsych.turk.turkInfo()\n  const uniqueId = `${turkInfo.workerId}:${turkInfo.assignmentId}`\n  return uniqueId\n}\n\nconst getUserId = (data) => {\n  const patientId = JSON.parse(data.responses)['Q0']\n  jsPsych.data.addProperties({patient_id: patientId, timestamp: Date.now()})\n  console.log(\"ID\", patientId)\n}\n\nexport {\n  sleep,\n  removeCursor,\n  addCursor,\n  rt,\n  jitter,\n  jitter50,\n  randomTrue,\n  deepCopy,\n  formatDollars,\n  generateWaitSet,\n  images,\n  startKeypressListener,\n  getUserId,\n  getTurkUniqueId\n}\n","import * as _ from 'lodash'\nimport { removeCursor } from '../lib/utils'\n\n// build a countdown transition with the given text and number of seconds\nconst buildCountdown = (text, time) => {\n  const times = _.range(time, 0 , -1)\n  const timeline = times.map( (val) => {return({ prompt: `\n\t\t  \t<div class='effort-container'>\n\t  \t    <h1>${text}<br><br>\n\t\t  \t${val}</h1></div>` })})\n\n  return ({\n    type: 'html_keyboard_response',\n    stimulus: '',\n    trial_duration: 1000,\n    response_ends_trial: false,\n    timeline:  timeline,\n    on_load: () => {\n      removeCursor('experiment')\n    }\n  })\n}\n\nexport default buildCountdown\n","// src/config/main.js\n// This is the main configuration file where universal and default settings should be placed.\n// These settings can then be imported anywhere in the app as they are exported at the botom of the file.\n\nimport { jsPsych } from 'jspsych-react'\nimport _ from 'lodash'\nimport { eventCodes } from './trigger'\n\nconst canvasSize = 600\nconst x25 = canvasSize * 0.25\nconst x20 = canvasSize * 0.2\nconst x33 = canvasSize * 0.33\nconst x75 = canvasSize * 0.75\nconst x8 = canvasSize * 0.0833\nconst x58 = canvasSize * 0.5833\nconst x42 = canvasSize * 0.4166\nconst x41 = canvasSize * 0.41\nconst x17 = canvasSize * 0.1667\nconst x90 = canvasSize * 0.9\nconst x70 = canvasSize * 0.7\nconst x2 = canvasSize * 0.01667\nconst x68 = canvasSize * 0.683333\nconst canvasSettings = {\n\tframeDimensions: [x33, x75],\n\tframeXpos: [x8, x58],\n\tframeYpos: x8,\n\tframeLinecolor: '#ffffff',\n\tballoonXpos: [x25, x75],\n\tballoonYpos: x68,\n\tspikeWidth: x8,\n\tspikeRefHeight: x42,\n\tspikeXpos: [x25, x75],\n\tspikeYpos: x17,\n\ttextXpos: [x20, x70],\n\ttextYpos: x90,\n\trewProbXpos: x41,\n\trewProbYpos: x90,\n\tlineHeight: x2,\n\tballoonRadius: x2,\n\tballoonBaseHeight: x8 + x75 - x68 - x2, // Balloon base height\n\tspiketopHeight: x17 - x8, // top height left from frame to spike\n\tinflateByHE: x75 / 800,\n\tinflateByNHE: x75 / 65\n}\n// mapping of letters to key codes\nconst keys = {\n\t\"P\": 80,\n\t\"Q\": 81,\n\t\"space\": 32,\n\t\"experimenter\": 'm' // key experimenter presses to quit payment screen\n}\n\n// is this mechanical turk?\nconst MTURK = (!jsPsych.turk.turkInfo().outsideTurk)\nconst AT_HOME = (process.env.REACT_APP_AT_HOME === 'true')\n\n// set whether photodiode visible or not\nconst PHOTODIODE_ON = false\n\n// get language file\nconst lang = require('../language/en_us.json')\nif (process.env.MTURK) { // if this is mturk, merge in the mturk specific language\n  const mlang = require('../language/en_us.mturk.json')\n\t_.merge(lang, mlang)\n}\n\nconst defaultBlockSettings = {\n\tprobs: [\"100%\"],\n\tvalue: [1, 0],\n\teffort: [20, 0],\n\thigh_effort: [],\n\tget_reward:[],\n\tcounterbalance: false,\n\tkeys: [],\n\trepeats_per_condition: 1, // number of times every condition is repeated\n\tis_practice: false,\n\tphotodiode_active: false,\n\tnum_breaks: 0\n}\n\n// high effort timeout (in seconds)\nconst high_effort_time = 25\n\n// how long to countdown (in seconds)\nconst countdownWait = 3\n\nexport {\n\tkeys,\n\tdefaultBlockSettings,\n\tlang,\n\tcountdownWait,\n\teventCodes,\n\tMTURK,\n\tAT_HOME,\n\tPHOTODIODE_ON,\n\tcanvasSize,\n\tcanvasSettings,\n\thigh_effort_time\n}\n","const baseStimulus = (element, prompt=false) => {\n  const class_ = (prompt) ? 'main-prompt': 'effort-container'\n  return `<div class=${class_}>${element}</div>`\n}\n\n\nexport {\n  baseStimulus\n}\n","import { lang } from '../config/main'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { addCursor } from '../lib/utils'\n\nconst welcomeScreenOne = baseStimulus(`\n    <div class='instructions'>\n    <h1>${lang.instructions.welcome}</h1>\n    <br></br>\n    <p>${lang.instructions.choose_btwn_two_balloons}</p>\n    </div>\n    `, true)\n\nconst welcomeScreenTwo = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.pop_balloon_earn_money}</p>\n    <p>${lang.instructions.points_to_bonus_conversion}</p>\n    <p>${lang.instructions.cumulative_rewards}</p>\n    </div>\n    `, true)\n\nconst bluePracticeScreen = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.two_balloons}</p>\n    <p>${lang.instructions.blue_balloon_points}</p>\n    <p>${lang.instructions.blue_practice_pump}</p>\n    </div>\n    `, true)\n\nconst greenPracticeScreenOne = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.green_balloon_points}</p>\n    <p>${lang.instructions.green_balloon_pop_time}</p>\n    </div>\n    `, true)\n\nconst greenPracticeScreenTwo = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.green_balloon_pump_bonus}</p>\n    </div>\n    `, true)\n\nconst greenPracticeScreenThree = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.green_practice_pump}</p>\n    </div>\n    `, true)\n\nconst realPracticeScreenOne = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.green_balloon_variable_points_pumps}</p>\n    <p>${lang.instructions.blue_balloon_constant_points_pumps}</p>\n    <p>${lang.instructions.wait_pump}</p>\n    </div>\n    `, true)\n\nconst realPracticeScreenTwo = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.reward_prob_variable}</p>\n    <p>${lang.instructions.reward_prob_certain}</p>\n    </div>\n    `, true)\n\nconst realPracticeScreenThree = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.reward_prob_display_event}</p>\n    </div>\n    `, true)\n\nconst realPracticeScreenFour = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.pump_keys}</p>\n    <p>${lang.instructions.choice_locked_in}</p>\n    </div>\n    `, true)\n\nconst readyScreen = baseStimulus(`\n    <div class='instructions'>\n    <p>${lang.instructions.ready}</p>\n    </div>\n    `, true)\n\n// First few instructions screens\nconst prePracticeInstructions = () => {\n\n  let instructionsArray = [\n    welcomeScreenOne,\n    welcomeScreenTwo\n  ]\n\n  return(\n    {\n      type: 'instructions',\n      show_clickable_nav: true,\n      pages: instructionsArray,\n      on_load: () => {\n        addCursor('experiment')\n      }\n    }\n  )\n}\n\n// Instruction screens re: blue balloon\nconst bluePracticeInstructions = () => {\n\n  let bluePracticeInstructionsArray = [\n    bluePracticeScreen\n  ]\n\n  return(\n    {\n      type: 'instructions',\n      show_clickable_nav: true,\n      pages: bluePracticeInstructionsArray,\n      on_load: () => {\n        addCursor('experiment')\n      }\n    }\n  )\n}\n\n// Instruction screens re: green balloon\nconst greenPracticeInstructions = () => {\n\n  let greenPracticeInstructionsArray = [\n    greenPracticeScreenOne,\n    greenPracticeScreenTwo,\n    greenPracticeScreenThree\n  ]\n\n  return(\n    {\n      type: 'instructions',\n      show_clickable_nav: true,\n      pages: greenPracticeInstructionsArray,\n      on_load: () => {\n        addCursor('experiment')\n      }\n    }\n  )\n}\n\n// Instruction screens re: 1 real practice trials\n// where both balloons are possible choices\nconst realPracticeInstructions = () => {\n\n  let realPracticeInstructionsArray = [\n    realPracticeScreenOne,\n    realPracticeScreenTwo,\n    realPracticeScreenThree,\n    realPracticeScreenFour\n  ]\n\n  return(\n    {\n      type: 'instructions',\n      show_clickable_nav: true,\n      pages: realPracticeInstructionsArray,\n      on_load: () => {\n        addCursor('experiment')\n      }\n    }\n  )\n}\n\n// Instructions after practice trials\nconst postPracticeInstructions = () => {\n\n  let postPracticeInstructionsArray = [\n    readyScreen\n  ]\n\n  return(\n    {\n      type: 'instructions',\n      show_clickable_nav: true,\n      pages: postPracticeInstructionsArray,\n      on_load: () => {\n        addCursor('experiment')\n      }\n    }\n  )\n}\n\nexport {\n  prePracticeInstructions,\n  bluePracticeInstructions,\n  greenPracticeInstructions,\n  realPracticeInstructions,\n  postPracticeInstructions\n}\n","import { MTURK, AT_HOME, PHOTODIODE_ON } from  '../../config/main'\nimport { eventCodes } from '../../config/trigger'\nimport $ from 'jquery'\n\n// conditionally load electron and psiturk based on MTURK config variable\nconst isElectron = !MTURK\nlet ipcRenderer = false;\nif (isElectron) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n}\n\n// Relies on styling in App.css, generate PD spot\nconst photodiodeGhostBox = () => {\n\tconst class_ = (AT_HOME || !PHOTODIODE_ON) ? 'invisible' : 'visible'\n\n  const markup = `<div class=\"photodiode-box ${class_}\" id=\"photodiode-box\">\n\t\t\t\t\t\t\t\t\t<span id=\"photodiode-spot\" class=\"photodiode-spot\"></span>\n  \t\t\t\t\t\t\t\t</div>`\n\treturn markup\n}\n\nconst pdSpotEncode = (taskCode) => {\n  function pulse_for(ms, callback) {\n      $('.photodiode-spot').css({\"background-color\": \"black\"})\n      setTimeout(() => {\n        $('.photodiode-spot').css({\"background-color\": \"white\"})\n        callback()\n      }, ms)\n    }\n\n    function repeat_pulse_for(ms, i) {\n      if (i > 0) {\n        pulse_for(ms, () => {\n          setTimeout(() => {\n            repeat_pulse_for(ms, i-1)\n          }, ms)\n        })\n      }\n    }\n\n\t\tif (!AT_HOME || !PHOTODIODE_ON) {\n\t\t\t\tconst blinkTime = 40\n\t\t\t\tlet numBlinks = taskCode\n\t\t    if (taskCode < eventCodes.open_task) numBlinks = 1;\n\t\t\t\trepeat_pulse_for(blinkTime, numBlinks)\n\t\t\t\tif ( ipcRenderer ) ipcRenderer.send('trigger', taskCode)\n\t\t\t}\n\t\t}\n\nexport {\n\tphotodiodeGhostBox,\n\tpdSpotEncode\n}\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst pleaseBiggen = () => {\n  var stimulus = baseStimulus(`<h1>${lang.welcome.large_window}</h1>`, true) +\n                 photodiodeGhostBox()\n\n  return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    prompt:  lang.prompt.continue.press,\n    response_ends_trial: true\n  }\n}\n\nconst welcomeMessage = () => {\n  var stimulus = baseStimulus(`<h1>${lang.welcome.message}</h1>`, true) +\n                 photodiodeGhostBox()\n\n  return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    prompt:  lang.prompt.continue.press,\n    response_ends_trial: true\n  }\n}\n\nconst welcome = {\n  type: 'html_keyboard_response',\n  timeline: [\n    pleaseBiggen(),\n    welcomeMessage()\n  ]\n}\n\nexport default welcome\n","import { eventCodes, lang } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst startCode = () => {\n  let stimulus = baseStimulus(`<h1>${lang.prompt.setting_up}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: 2000,\n    on_load: () => {\n      pdSpotEncode(eventCodes.open_task)\n    }\n  }\n}\n\nexport default startCode\n","import { defaultBlockSettings } from './main';\nimport { deepCopy } from '../lib/utils'\n\n// PRACTICE BLOCK SETTINGS\n\n// Practice Block 1 -- bluePractice\n// create copy of default settings\nlet practiceBlock1 = deepCopy(defaultBlockSettings)\n\npracticeBlock1.is_practice = true\npracticeBlock1.probs = [\"100%\"]\npracticeBlock1.value = [1, 0]\npracticeBlock1.effort = [20, 0]\npracticeBlock1.high_effort = [false, false]\npracticeBlock1.keys = ['q']\npracticeBlock1.get_reward = [true, true]\n\n// Practice Block 1 -- greenPractice\nlet practiceBlock2 = deepCopy(defaultBlockSettings)\n\npracticeBlock2.is_practice = true\npracticeBlock2.probs = [\"100%\"]\npracticeBlock2.value = [0, 5]\npracticeBlock2.effort = [0, 200]\npracticeBlock2.high_effort = [false, true]\npracticeBlock2.keys = ['p']\npracticeBlock2.get_reward = [true, true]\n\n// Practice Block 1 -- realPractice\nlet practiceBlock3 = deepCopy(defaultBlockSettings)\n\npracticeBlock3.is_practice = true\npracticeBlock3.probs = [\"50%\"]\npracticeBlock3.value = [1, 5]\npracticeBlock3.effort = [20, 200]\npracticeBlock3.high_effort = [false, true]\npracticeBlock3.keys = ['q', 'p']\npracticeBlock3.get_reward = [false, true]\n\n// export the settings\nexport {\n\tpracticeBlock1,\n\tpracticeBlock2,\n\tpracticeBlock3\n}\n","import { prePracticeInstructions } from '../trials/instructions'\nimport welcome from '../trials/welcome'\nimport startCode from '../trials/startCode'\nimport { AT_HOME } from '../config/main'\nimport { practiceBlock1 } from '../config/practice'\n\nconsole.log('at_home', AT_HOME)\nconsole.log('env at home', process.env.REACT_APP_AT_HOME)\nconst preamble = {\n  type: 'html_keyboard_response',\n  stimulus: '',\n  timeline:\n    (AT_HOME) ?\n    [welcome,\n      prePracticeInstructions(practiceBlock1)] :\n    [startCode(),\n      welcome,\n      prePracticeInstructions(practiceBlock1)\n    ]\n}\n\nexport default preamble\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst experimentStart = () => {\n  let stimulus = baseStimulus(`<h1>${lang.task.name}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [lang.prompt.continue.button]\n  }\n}\n\nexport default experimentStart\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { addCursor } from '../lib/utils'\n\nconst experimentEnd = (duration) => {\n  let stimulus = baseStimulus(`<h1>${lang.task.end}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: duration,\n    on_load: () => {\n      addCursor('experiment')\n    }\n  }\n}\n\nexport default experimentEnd\n","import { eventCodes } from '../config/main'\nimport { jitter50, removeCursor } from '../lib/utils'\nimport { pdSpotEncode, photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { fixationHTML } from '../lib/markup/fixation'\nimport { jsPsych } from 'jspsych-react'\n\nconst fixation = (duration) => {\n  let stimulus = fixationHTML + photodiodeGhostBox()\n\n  const startCode = eventCodes.fixationStart;\n  const endCode = eventCodes.fixationEnd;\n\n  return {\n    type: 'html_keyboard_response',\n    choices: jsPsych.NO_KEYS,\n    stimulus: stimulus,\n    response_ends_trial: false,\n    trial_duration: jitter50(duration),\n    on_load: () => {\n      removeCursor('experiment')\n      pdSpotEncode(startCode)\n    },\n    on_finish: (data) => {\n      pdSpotEncode(endCode)\n      data.code = [startCode, endCode]\n    }\n  }\n}\n\nexport default fixation\n","export const fixationHTML = '<div class=\"effort-container\"><div id=\"fixation-dot\" class=\"color-white\"> </div></div>'\n","import { canvasSettings } from '../config/main'\n\nfunction drawText(ctx, lang, cx, cy, langColor){\n    var color;\n    // var lang;\n    if (langColor === 'undefined') {\n        color = '#FFFFFF' // force white\n    } else {\n      color = langColor;\n    }\n    ctx.font = '40px Helvetica';\n    ctx.fillStyle = color;\n    var lineHeight = canvasSettings.lineHeight;\n    ctx.lineHeight = lineHeight;\n    let text = lang // should be %\n    // let text2 = `${pumpsRequired} pumps`\n    ctx.fillText(text, cx + lineHeight, cy);\n    // ctx.fillText(text2, cx - lineHeight, cy + (lineHeight * 2));\n}\n\n// Text for how many pumps are required for each balloon\nfunction drawEffort(ctx, points, pumpsRequired, cx, cy, high_effort){\n    var color;\n    if (high_effort) {\n        color = '#7FFF00' // green\n    } else if (pumpsRequired === 0) {\n        color = 'black'\n    } else {\n        color = '#00FFFF' // blue\n    }\n    ctx.font = '20px Helvetica';\n    ctx.fillStyle = color;\n    var lineHeight = canvasSettings.lineHeight;\n    ctx.lineHeight = lineHeight;\n    let text = `${points} pts`\n    let text2 = `${pumpsRequired} pumps`\n    ctx.fillText(text, cx + lineHeight, cy);\n    ctx.fillText(text2, cx - lineHeight, cy + (lineHeight * 2));\n}\n\nfunction drawSpike(ctx, w, h, cx, cy, fillColor, lineColor, clear){\n    ctx.save();\n    ctx.fillStyle = fillColor;\n    ctx.strokeStyle = lineColor;\n    ctx.beginPath();\n    if (clear) {\n        ctx.clearRect(cx - w / 2,\n                      cy,\n                      cx,\n                      cy + h);\n    } else {\n        ctx.moveTo(cx - w / 2, cy);\n        ctx.lineTo(cx + w / 2, cy);\n        ctx.lineTo(cx, cy + h);\n        ctx.lineTo(cx - w / 2, cy);\n        ctx.fill();\n    }\n    ctx.closePath();\n    ctx.save();\n}\n\nfunction drawFrame(ctx, w, h, cx, cy, lineColor, clear){\n    ctx.save();\n    ctx.lineWidth = 1.5;\n    ctx.strokeStyle = lineColor;\n    ctx.beginPath();\n    if (clear) {\n        ctx.clearRect(cx - w / 2,\n                      cy,\n                      cx,\n                      cy + h);\n    } else {\n        ctx.rect(cx, cy, w, h);\n        ctx.stroke();\n    }\n    ctx.closePath();\n    ctx.save();\n}\n\nfunction drawBalloon(ctx, pumpsRequired, high_effort, cx, cy, radius){\n    var color;\n    if (high_effort) {\n        color = '#7FFF00'\n    }\n    else if (pumpsRequired === 0) {\n        color = 'black'\n    } else {\n        color = '#00FFFF'\n    }\n    ctx.save();\n    ctx.beginPath();\n    ctx.scale(0.75, 1);\n    ctx.arc(cx * 1 / 0.75, cy, radius, 0, 2 * Math.PI);\n    ctx.fillStyle = color;\n    ctx.strokeStyle = color;\n    ctx.fill();\n    ctx.lineWidth = 1;\n    ctx.restore();\n}\n\nexport{\n    drawText,\n    drawEffort,\n    drawSpike,\n    drawFrame,\n    drawBalloon\n}\n","// utilities specific to this app/task\nimport _ from 'lodash'\n\n// initialize starting conditions for each trial within a block\nconst generateStartingOpts = (blockSettings) => {\n\tif (blockSettings.is_practice) {\n\t\tlet startingOptions = blockSettings.probs.map( (c) => {\n\t\t\t// Repeat each starting condition the same number of times\n\t\t\treturn _.range(blockSettings.repeats_per_condition).map( () => c )\n\t\t})\n\t\treturn _.shuffle(_.flatten(startingOptions))\n\t} else {\n\t\tlet opts = []\n\t\tfor (let i = 0; i < blockSettings.probs.length; i++) {\n\t\t\tfor (let val in blockSettings.value) {\n\t\t\t\tfor (let eff in blockSettings.effort) {\n\t\t\t\t\topts.push({prob : blockSettings.probs[i], effort: [blockSettings.effort[eff],20], value: [blockSettings.value[val], 1], high_effort: [true, false], get_reward: [blockSettings.get_reward[i], blockSettings.get_reward[i]]})\n\t\t\t\t\tif (blockSettings.counterbalance) {\n\t\t\t\t\t\topts.push({prob: blockSettings.probs[i], effort: [20, blockSettings.effort[eff]], value: [1, blockSettings.value[val]], high_effort: [false, true], get_reward: [blockSettings.get_reward[i], blockSettings.get_reward[i]]});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn _.shuffle(opts)\n\t}\n}\n\n// save data\nconst addData = (trialDetails, blockSettings, opts) => {\n\n\tlet data = {\n\t\ttimestamp: Date.now(),\n\t\ttrial_earnings: trialDetails.trial_earnings, // reward feedback\n\t\ttrial_cumulative_earnings: trialDetails.trial_cumulative_earnings,\n\t\teffort: blockSettings.is_practice ? blockSettings.effort : opts.effort, // how many pumps\n\t\tpoints: blockSettings.is_practice ? blockSettings.value : opts.value, // how many points\n\t\tget_reward: blockSettings.is_practice ? blockSettings.get_reward : opts.get_reward, // true or false\n\t\thigh_effort: blockSettings.is_practice ? blockSettings.high_effort : opts.high_effort, // true or false\n\t\tkeys: blockSettings.keys,\n\t\tsubtrial_type: trialDetails.subtrial_type\n\t}\n\n\treturn data\n}\n\n\nexport {\n\tgenerateStartingOpts,\n\taddData\n}\n","import { eventCodes } from '../config/main'\nimport { removeCursor } from '../lib/utils'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { canvasSize, canvasSettings } from '../config/main'\nimport { drawText } from '../lib/drawUtils'\nimport { addData } from '../lib/taskUtils'\n\nconst CANVAS_SIZE = canvasSize\nconst canvasHTML = `<canvas width=\"${CANVAS_SIZE}\" height=\"${CANVAS_SIZE}\" id=\"jspsych-canvas\">\n    Your browser does not support HTML5 canvas\n  </canvas>`\nconst fixationHTML = `<div id=\"fixation-dot\" class=\"color-white\"> </div>`\n\nconst rewardProbability = (duration, blockSettings, opts, trialDetails) => {\n\n  let stimulus = `<div class=\"effort-container\">` + canvasHTML + fixationHTML + photodiodeGhostBox() + `</div>`\n\n  const startCode = eventCodes.rewardProbabilityStart\n  const endCode = eventCodes.rewardProbabilityEnd\n\n  let probability = blockSettings.is_practice ? opts : opts.prob\n\n  return {\n    type: 'call_function',\n    async: true,\n    func: (done) => {\n        document.getElementById('jspsych-content').innerHTML = stimulus\n\n        // set up canvas\n        let canvas = document.querySelector('#jspsych-canvas');\n        let ctx = canvas.getContext('2d');\n\n        const rewProbDraw = () => {\n          // transparent background\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n          drawText(ctx, `${probability}`, canvasSettings.rewProbXpos, canvasSettings.rewProbYpos, 'undefined')\n\n        }\n\n        trialDetails.probability = probability;\n        trialDetails.subtrial_type = 'reward_prob'\n\n        rewProbDraw()\n        setTimeout(\n          () => {\n            done(addData(trialDetails,\n              blockSettings,\n              opts))\n          },\n          duration)\n\n    },\n    on_load: () => {\n      removeCursor('experiment')\n      pdSpotEncode(startCode)\n    },\n    on_finish: (data) => {\n      pdSpotEncode(endCode)\n      data.encode = [startCode, endCode]\n    }\n\n  }\n}\n\nexport default rewardProbability\n","// imports\nimport { eventCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { canvasSize, canvasSettings } from '../config/main'\nimport { removeCursor } from '../lib/utils'\nimport { addData } from '../lib/taskUtils'\nimport { drawSpike, drawText} from '../lib/drawUtils'\n\nconst CANVAS_SIZE = canvasSize\nconst canvasHTML = `<canvas width=\"${CANVAS_SIZE}\" height=\"${CANVAS_SIZE}\" id=\"jspsych-canvas\">\n    Your browser does not support HTML5 canvas\n  </canvas>`\nconst fixationHTML = `<div id=\"fixation-dot\" class=\"color-white\"> </div>`\n\nconst frameSpike = (duration, blockSettings, opts, trialDetails) => {\n  let stimulus = `<div class=\"effort-container\">` + canvasHTML + fixationHTML + photodiodeGhostBox() + `</div>`\n\n  const startCode = eventCodes.frameSpikeStart\n  const endCode = eventCodes.frameSpikeEnd\n\n  let probability = blockSettings.is_practice ? opts : opts.prob\n  let effort = blockSettings.is_practice ? blockSettings.effort : opts.effort\n  let high_effort = blockSettings.is_practice ? blockSettings.high_effort : opts.high_effort\n\n  return {\n    type: 'call_function',\n    async: true,\n    func: (done) => {\n      // add stimulus to the DOM\n      document.getElementById('jspsych-content').innerHTML = stimulus\n      // $('#jspsych-content').addClass('task-container')\n\n      // set up canvas\n      let canvas = document.querySelector('#jspsych-canvas');\n      let ctx = canvas.getContext('2d');\n\n      const canvasDraw = () => {\n        // transparent background\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        var inflateBy;\n        var spikeHeight = [0, 0]\n        for (let i =0 ; i < 2; i++)\n        {\n          if (high_effort[i]) {\n              inflateBy = canvasSettings.inflateByHE\n          }\n          else {\n              inflateBy = canvasSettings.inflateByNHE\n          }\n\n          // how far should the spike be\n          var targetDist = 2 * inflateBy * (effort[i] - 1);\n          var balloonBaseHeight = canvasSettings.balloonBaseHeight + (2 * canvasSettings.balloonRadius);\n          // distance of the spike from the top\n          spikeHeight[i] = effort[i] ? (canvasSettings.frameDimensions[1] - balloonBaseHeight - targetDist - canvasSettings.spiketopHeight) : 0;\n        }\n\n        drawText(ctx, `${probability}`, canvasSettings.rewProbXpos, canvasSettings.rewProbYpos, 'undefined')\n\n        // drawFrame(ctx, canvasSettings.frameDimensions[0], canvasSettings.frameDimensions[1], canvasSettings.frameXpos[0], canvasSettings.frameYpos, canvasSettings.frameLinecolor, false)\n        drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight[0], canvasSettings.spikeXpos[0], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, false)\n\n        // drawFrame(ctx, canvasSettings.frameDimensions[0], canvasSettings.frameDimensions[1], canvasSettings.frameXpos[1], canvasSettings.frameYpos, canvasSettings.frameLinecolor, false)\n        drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight[1], canvasSettings.spikeXpos[1], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, false)\n      }\n\n      trialDetails.probability = probability\n      trialDetails.subtrial_type = 'frame_and_spike'\n\n      canvasDraw()\n      setTimeout(\n        () => {\n          done(addData(trialDetails,\n              blockSettings,\n              opts))\n        },\n        duration)\n      },\n      on_load: () => {\n        removeCursor('experiment')\n        pdSpotEncode(startCode)\n      },\n      on_finish: (data) => {\n        pdSpotEncode(endCode)\n        data.code = [startCode, endCode]\n      }\n    }\n  }\nexport default frameSpike\n","import { jsPsych } from 'jspsych-react'\nimport { eventCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { keys, canvasSize, canvasSettings } from '../config/main'\nimport { removeCursor } from '../lib/utils'\nimport { drawBalloon, drawSpike, drawText, drawEffort } from '../lib/drawUtils'\n\nconst CANVAS_SIZE = canvasSize\nconst canvasHTML = `<canvas width=\"${CANVAS_SIZE}\" height=\"${CANVAS_SIZE}\" id=\"jspsych-canvas\">\n    Your browser does not support HTML5 canvas\n  </canvas>`\nconst fixationHTML = `<div id=\"fixation-dot\" class=\"color-white\"> </div>`\n\nconst choice = (duration, blockSettings, opts) => {\n  let stimulus = `<div class=\"effort-container\">` + canvasHTML + fixationHTML + photodiodeGhostBox() + `</div>`\n\n  const startCode = eventCodes.choiceStart\n  const endCode = eventCodes.choiceEnd\n\n  duration = blockSettings.is_practice ? 5000000 : duration // make practice choices have no timeout\n  let probability = blockSettings.is_practice ? opts : opts.prob\n  let value = blockSettings.is_practice ? blockSettings.value : opts.value\n  let effort = blockSettings.is_practice ? blockSettings.effort : opts.effort\n  let high_effort = blockSettings.is_practice ? blockSettings.high_effort : opts.high_effort\n  let valid_keys = blockSettings.keys\n  let get_reward = blockSettings.is_practice ? blockSettings.get_reward : opts.get_reward\n\n  return {\n    type: 'call_function',\n    async: true,\n    func: (done) => {\n      // add stimulus to the DOM\n      document.getElementById('jspsych-content').innerHTML = stimulus\n      // $('#jspsych-content').addClass('task-container')\n\n      // set up canvas\n      let canvas = document.querySelector('#jspsych-canvas');\n      let ctx = canvas.getContext('2d');\n      let timeWhenStarted = (new Date()).getTime()\n\n      const canvasDraw = () => {\n        // transparent background\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        var inflateBy;\n        var spikeHeight = [0, 0]\n        for (let i =0 ; i < 2; i++)\n        {\n          if (high_effort[i]) {\n              inflateBy = canvasSettings.inflateByHE\n          } else {\n              inflateBy = canvasSettings.inflateByNHE\n          }\n\n          // how far should the spike be\n          var targetDist = 2 * inflateBy * (effort[i] - 1);\n          var balloonBaseHeight = canvasSettings.balloonBaseHeight + (2 * canvasSettings.balloonRadius);\n          // distance of the spike from the top\n          spikeHeight[i] = effort[i] ? (canvasSettings.frameDimensions[1] - balloonBaseHeight - targetDist - canvasSettings.spiketopHeight) : 0;\n        }\n\n        drawText(ctx, `${probability}`, canvasSettings.rewProbXpos, canvasSettings.rewProbYpos, 'undefined')\n\n        // drawFrame(ctx, canvasSettings.frameDimensions[0], canvasSettings.frameDimensions[1], canvasSettings.frameXpos[0], canvasSettings.frameYpos, canvasSettings.frameLinecolor, false)\n        drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight[0], canvasSettings.spikeXpos[0], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, false)\n        drawEffort(ctx, value[0], effort[0], canvasSettings.textXpos[0], canvasSettings.textYpos, high_effort[0])\n        drawBalloon(ctx, effort[0], high_effort[0], canvasSettings.balloonXpos[0], canvasSettings.balloonYpos, canvasSettings.balloonRadius)\n\n        // drawFrame(ctx, canvasSettings.frameDimensions[0], canvasSettings.frameDimensions[1], canvasSettings.frameXpos[1], canvasSettings.frameYpos, canvasSettings.frameLinecolor, false)\n        drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight[1], canvasSettings.spikeXpos[1], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, false)\n        drawEffort(ctx, value[1], effort[1], canvasSettings.textXpos[1], canvasSettings.textYpos, high_effort[1])\n        drawBalloon(ctx, effort[1], high_effort[1], canvasSettings.balloonXpos[1], canvasSettings.balloonYpos, canvasSettings.balloonRadius)\n      }\n\n      canvasDraw()\n      var timer = setInterval(function() {\n        var now = (new Date()).getTime();\n        var percTimePassed = (now - timeWhenStarted) / 1000 / (duration/1000);\n\n        if (percTimePassed >= 1.) {\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener)\n            clearInterval(timer);\n            var returnObj = {\n              \"key\": 0,\n              \"effort\": 0,\n              \"value\": 0,\n              \"high_effort\": 0,\n              \"get_reward\": 0,\n              \"subtrial_type\": 'choice'\n            }\n            done(returnObj)\n        }\n    }, 50)\n      function after_response(info) {\n        clearInterval(timer);\n        jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener)\n        if (info.key === keys[\"Q\"]) { // 1 key\n          var returnObj = {\n            \"key\": info.key,\n            \"effort\": effort[0],\n            \"value\": value[0],\n            \"high_effort\": high_effort[0],\n            \"get_reward\": get_reward[0],\n            \"subtrial_type\": 'choice'\n          }\n          done(returnObj)\n        } else if (info.key === keys[\"P\"]) { // 0 key\n          returnObj = {\n            \"key\": info.key,\n            \"effort\": effort[1],\n            \"value\": value[1],\n            \"high_effort\": high_effort[1],\n            \"get_reward\": get_reward[1]\n          }\n          done(returnObj)\n        }\n      }\n\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: valid_keys,\n          rt_method: 'date',\n          persist: true,\n          allow_held_key: false\n      });\n\n    },\n    on_load: () => {\n      removeCursor('experiment')\n      pdSpotEncode(startCode)\n    },\n    on_finish: (data) => {\n      pdSpotEncode(endCode)\n      data.code = [startCode, endCode]\n    }\n  }\n}\n\nexport default choice\n","// imports\nimport { eventCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { canvasSize, canvasSettings } from '../config/main'\nimport { removeCursor } from '../lib/utils'\nimport { addData } from '../lib/taskUtils'\nimport { drawEffort, drawSpike, drawText } from '../lib/drawUtils'\n\nconst CANVAS_SIZE = canvasSize\nconst canvasHTML = `<canvas width=\"${CANVAS_SIZE}\" height=\"${CANVAS_SIZE}\" id=\"jspsych-canvas\">\n    Your browser does not support HTML5 canvas\n  </canvas>`\nconst fixationHTML = `<div id=\"fixation-dot\" class=\"color-white\"> </div>`\n\nconst costBenefits = (duration, blockSettings, opts, trialDetails) => {\n\n  let stimulus = `<div class=\"effort-container\">` + canvasHTML + fixationHTML + photodiodeGhostBox() + `</div>`\n\n  const startCode = eventCodes.costBenefitsStart\n  const endCode = eventCodes.costBenefitsEnd\n\n  let probability = blockSettings.is_practice ? opts : opts.prob\n  let value = blockSettings.is_practice ? blockSettings.value : opts.value\n  let effort = blockSettings.is_practice ? blockSettings.effort : opts.effort\n  let high_effort = blockSettings.is_practice ? blockSettings.high_effort : opts.high_effort\n\n  return {\n    type: 'call_function',\n    async: true,\n    func: (done) => {\n      // add stimulus to the DOM\n      document.getElementById('jspsych-content').innerHTML = stimulus\n      // $('#jspsych-content').addClass('task-container')\n\n      // set up canvas\n      let canvas = document.querySelector('#jspsych-canvas');\n      let ctx = canvas.getContext('2d');\n\n      const canvasDraw = () => {\n        // transparent background\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        var inflateBy;\n        var spikeHeight = [0, 0]\n        for (let i =0 ; i < 2; i++)\n        {\n          if (high_effort[i]) {\n              inflateBy = canvasSettings.inflateByHE\n          }\n          else {\n              inflateBy = canvasSettings.inflateByNHE\n          }\n\n          // how far should the spike be\n          var targetDist = 2 * inflateBy * (effort[i] - 1);\n          var balloonBaseHeight = canvasSettings.balloonBaseHeight + (2*canvasSettings.balloonRadius);\n          // distance of the spike from the top\n          spikeHeight[i] = effort[i] ? (canvasSettings.frameDimensions[1] - balloonBaseHeight - targetDist - canvasSettings.spiketopHeight):0;\n        }\n\n        drawText(ctx, `${probability}`, canvasSettings.rewProbXpos, canvasSettings.rewProbYpos, 'undefined')\n\n        // drawFrame(ctx, canvasSettings.frameDimensions[0], canvasSettings.frameDimensions[1], canvasSettings.frameXpos[0], canvasSettings.frameYpos, canvasSettings.frameLinecolor, false)\n        drawEffort(ctx, value[0], effort[0], canvasSettings.textXpos[0], canvasSettings.textYpos, high_effort[0])\n        drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight[0], canvasSettings.spikeXpos[0], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, false)\n\n        // drawFrame(ctx, canvasSettings.frameDimensions[0], canvasSettings.frameDimensions[1], canvasSettings.frameXpos[1], canvasSettings.frameYpos, canvasSettings.frameLinecolor, false)\n        drawEffort(ctx, value[1], effort[1], canvasSettings.textXpos[1], canvasSettings.textYpos, high_effort[1])\n        drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight[1], canvasSettings.spikeXpos[1], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, false)\n\n      }\n\n      trialDetails.probability = probability;\n      trialDetails.effort = effort;\n      trialDetails.high_effort = high_effort;\n      trialDetails.value = value;\n      trialDetails.subtrial_type = 'cost_benefits'\n\n      canvasDraw()\n      setTimeout(\n        () => {\n          done(addData(trialDetails,\n            blockSettings,\n            opts))\n        },\n        duration)\n    },\n    on_load: () => {\n      removeCursor('experiment')\n      pdSpotEncode(startCode)\n    },\n    on_finish: (data) => {\n      pdSpotEncode(endCode)\n      data.code = [startCode, endCode]\n    }\n  }\n}\n\nexport default costBenefits\n","import { jsPsych } from 'jspsych-react'\nimport { eventCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { keys, canvasSize, canvasSettings, high_effort_time } from '../config/main'\nimport { removeCursor } from '../lib/utils'\nimport { drawBalloon, drawSpike, drawEffort, drawText } from '../lib/drawUtils'\n\n\nconst CANVAS_SIZE = canvasSize\nconst canvasHTML = `<canvas width=\"${CANVAS_SIZE}\" height=\"${CANVAS_SIZE}\" id=\"jspsych-canvas\">\n    Your browser does not support HTML5 canvas\n  </canvas>`\n\nconst pressBalloon = (duration, blockSettings, opts) => {\n  let stimulus = `<div class=\"effort-container\">` + canvasHTML + photodiodeGhostBox() + `</div>`\n\n  let valid_keys = blockSettings.keys\n  let is_practice = blockSettings.is_practice\n\n  const startCode = eventCodes.pressBalloonStart\n  const endCode = eventCodes.pressBalloonEnd\n\n  let probability = blockSettings.is_practice ? opts : opts.prob\n  let value = blockSettings.is_practice ? blockSettings.value : opts.value\n  let effort = blockSettings.is_practice ? blockSettings.effort : opts.effort\n  let high_effort = blockSettings.is_practice ? blockSettings.high_effort : opts.high_effort\n\n  return {\n    type: 'call_function',\n    async: true,\n    func: (done) => {\n      // add stimulus to the DOM\n      document.getElementById('jspsych-content').innerHTML = stimulus\n      let values = jsPsych.data.get().select('value').values\n      let last = values[values.length - 1]\n      if (last.key) {\n        // set up canvas\n        let canvas = document.querySelector('#jspsych-canvas');\n        let ctx = canvas.getContext('2d');\n        let timeWhenStarted = (new Date()).getTime()\n        let inflateBy, popped = 0, countPumps = 0, radius = canvasSettings.balloonRadius, spikeHeight, reward;\n        let balloonBaseHeight = canvasSettings.balloonBaseHeight + (2 * canvasSettings.balloonRadius);\n        let balloonYpos = canvasSettings.balloonYpos;\n        let points, data = {};\n        let keys_pressed = jsPsych.data.get().select('value').values\n        let choice = keys_pressed[keys_pressed.length - 1]\n\n        if (choice.high_effort) {\n          inflateBy = canvasSettings.inflateByHE\n        } else {\n          inflateBy = canvasSettings.inflateByNHE\n        }\n\n        const canvasDraw = () => {\n          // transparent background\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          drawText(ctx, `${probability}`, canvasSettings.rewProbXpos, canvasSettings.rewProbYpos, 'undefined')\n\n          var targetDist = 2 * inflateBy * (choice.effort - 1);\n          spikeHeight = choice.effort ? (canvasSettings.frameDimensions[1] - balloonBaseHeight - targetDist - canvasSettings.spiketopHeight) : 0;\n          if (choice.key === keys['Q']) {\n            // drawFrame(ctx, canvasSettings.frameDimensions[0], canvasSettings.frameDimensions[1], canvasSettings.frameXpos[0], canvasSettings.frameYpos, canvasSettings.frameLinecolor, false)\n            drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight, canvasSettings.spikeXpos[0], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, false)\n            drawEffort(ctx, value[0], effort[0], canvasSettings.textXpos[0], canvasSettings.textYpos, high_effort[0])\n            drawBalloon(ctx, choice.effort, choice.high_effort, canvasSettings.balloonXpos[0], canvasSettings.balloonYpos, radius)\n          } else {\n            // drawFrame(ctx, canvasSettings.frameDimensions[0], canvasSettings.frameDimensions[1], canvasSettings.frameXpos[1], canvasSettings.frameYpos, canvasSettings.frameLinecolor, false)\n            drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight, canvasSettings.spikeXpos[1], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, false)\n            drawEffort(ctx, value[1], effort[1], canvasSettings.textXpos[1], canvasSettings.textYpos, high_effort[1])\n            drawBalloon(ctx, choice.effort, choice.high_effort, canvasSettings.balloonXpos[1], canvasSettings.balloonYpos, radius)\n          }\n        }\n\n        canvasDraw()\n        var timer = setInterval(function() {\n          var now = (new Date()).getTime();\n          var percTimePassed = (now - timeWhenStarted) / 1000 / high_effort_time;\n\n          if ((percTimePassed >= 1.) & (countPumps > 0)) {\n              if (!choice.high_effort) {\n                  points = 0;\n              }\n              popTimeout();\n              jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener)\n              done(data)\n          }\n      }, 50)\n        function computeReward() {\n          if (choice.high_effort && choice.get_reward) {\n              points = choice.value * (countPumps / choice.effort);\n              points = Math.round(points * 100) / 100;\n          }\n          else if (!choice.get_reward) {\n            points = 0;\n          }\n          else {\n            points = choice.value;\n          }\n\n          return points;\n        }\n\n        function pop() {\n          clearInterval(timer);\n          // pop balloon\n          popped = true;\n          // this.deleteCircle();\n\n          reward = computeReward()\n          data = {\n            \"reward\": reward,\n            \"is_practice\": is_practice,\n            \"subtrial_type\": 'inflate_balloon',\n            \"rt\": rts,\n            \"pumps\": countPumps,\n            \"timeWhenPopped\": (new Date()).getTime(),\n            \"firstPress\": rts[0],\n            \"lastPress\": rts[rts.length - 1],\n          }\n        };\n\n        function popTimeout() {\n          clearInterval(timer);\n          // pop balloon\n          popped = true;\n          // this.deleteCircle();\n          if (choice.high_effort) {\n            reward = computeReward()\n          } else {\n            reward = 0\n          }\n          data = {\n            \"reward\": reward,\n            \"is_practice\": is_practice,\n            \"subtrial_type\": 'inflate_balloon',\n            \"rt\": rts,\n            \"pumps\": countPumps,\n            \"firstPress\": rts[0],\n            \"lastPress\": rts[rts.length - 1],\n          }\n        };\n        function hitSpike() {\n          var balloonBase = canvasSettings.balloonBaseHeight\n          var balloonHeight = (balloonBase + 2 * radius);\n          var remaining = canvasSettings.frameDimensions[1] - balloonHeight - canvasSettings.spiketopHeight\n          var crash = false;\n          if (spikeHeight > remaining) {\n              crash = true;\n          }\n          return crash;\n        }\n\n        let rts = []\n\n        function inflate(choice) {\n          // if (popped){\n          //   return\n          // }\n\n          // Record RT relative to when trial started\n          var timeWhenPressed = (new Date()).getTime();\n          var rt = timeWhenPressed - timeWhenStarted\n          rts.push(rt);\n\n          // record time if this is the first pump\n          if (countPumps === 0) {\n              timeWhenStarted = (new Date()).getTime();\n          }\n          countPumps++;\n          radius += inflateBy;\n          balloonYpos -= inflateBy;\n\n          // redraw\n          if (choice.key === keys['Q']) {\n            drawBalloon(ctx, choice.effort, choice.high_effort, canvasSettings.balloonXpos[0], balloonYpos, radius)\n          }\n          if (choice.key === keys['P']) {\n            drawBalloon(ctx, choice.effort, choice.high_effort, canvasSettings.balloonXpos[1], balloonYpos, radius)\n          }\n          if (hitSpike() && !choice.high_effort) {\n            pop()\n          }\n          if (hitSpike() && choice.high_effort) {\n            if (choice.key === keys['Q']) {\n              drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight, canvasSettings.spikeXpos[0], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, true)\n              drawBalloon(ctx, choice.effort, choice.high_effort, canvasSettings.balloonXpos[0], balloonYpos, radius)\n            }\n            if (choice.key === keys['P']) {\n              drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight, canvasSettings.spikeXpos[1], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, true)\n              drawBalloon(ctx, choice.effort, choice.high_effort, canvasSettings.balloonXpos[1], balloonYpos, radius)\n            }\n            var balloonBase = canvasSettings.balloonBaseHeight\n            var balloonHeight = (balloonBase + (2 * radius));\n            spikeHeight = canvasSettings.frameDimensions[1] - balloonHeight - canvasSettings.spiketopHeight\n            if (choice.key === keys['Q']) {\n              drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight, canvasSettings.spikeXpos[0], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, false)\n            }\n            if (choice.key === keys['P']) {\n              drawSpike(ctx, canvasSettings.spikeWidth, spikeHeight, canvasSettings.spikeXpos[1], canvasSettings.spikeYpos, canvasSettings.frameLinecolor, canvasSettings.frameLinecolor, false)\n            }\n            // if (countPumps > choice.effort + 10) {\n            //   pop()\n            //   return\n            // }\n          }\n        }\n        function after_response(info) {\n          let keys_pressed = jsPsych.data.get().select('value').values\n          let choice = keys_pressed[keys_pressed.length - 1]\n          if (info.key === choice.key){\n            inflate(choice)\n            if (popped) {\n              jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener)\n              done(data)\n            }\n          }\n        }\n\n        // start the response listener\n        var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n            callback_function: after_response,\n            valid_responses: valid_keys,\n            rt_method: 'date',\n            persist: true,\n            allow_held_key: false\n        });\n      } else {\n        done(0)\n      }\n\n    },\n    on_load: () => {\n      removeCursor('experiment')\n      pdSpotEncode(startCode)\n    },\n    on_finish: (data) => {\n      pdSpotEncode(endCode)\n      data.code = [startCode, endCode]\n    }\n  }\n}\n\nexport default pressBalloon\n","import { eventCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { removeCursor } from '../lib/utils'\nimport { addData } from '../lib/taskUtils'\nimport { jsPsych } from 'jspsych-react'\n\nconst rewardFeedback = (duration, blockSettings, opts, trialDetails) => {\n\n  const startCode = eventCodes.rewardFeedbackStart\n  const endCode = eventCodes.rewardFeedbackEnd\n\n  return {\n    type: 'call_function',\n    async: true,\n    func: (done) => {\n      // send trigger events\n      let rewards = jsPsych.data.get().select('value').values\n      let last = rewards[rewards.length - 1]\n      let stimulus\n      if (last) {\n        stimulus = `<div class=\"effort-container\"><h1>+${(last.reward).toFixed(2)}</h1>` + photodiodeGhostBox() + `</div>`\n        trialDetails.trial_earnings = last.reward\n      } else {\n        stimulus = `<div class=\"effort-container\"><h1>+${0}</h1>` + photodiodeGhostBox() + `</div>`\n        trialDetails.trial_earnings = 0\n      }\n      document.getElementById('jspsych-content').innerHTML = stimulus\n\n      trialDetails.subtrial_type = 'reward_feedback'\n\n      setTimeout(() => {\n        done(addData(blockSettings,\n                trialDetails,\n                opts))\n      }, duration);\n    },\n    on_load: () => {\n      removeCursor('experiment')\n      pdSpotEncode(startCode)\n    },\n    on_finish: (data) => {\n      pdSpotEncode(endCode)\n      data.code = [startCode, endCode]\n    }\n  }\n}\n\nexport default rewardFeedback\n","import { eventCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { removeCursor } from '../lib/utils'\nimport { addData } from '../lib/taskUtils'\nimport { jsPsych } from 'jspsych-react'\nimport { lang } from '../config/main'\n\nconst cumulativeReward = (duration, blockSettings, blockDetails, opts, trialDetails) => {\n\n  const startCode = eventCodes.cumulativeRewardsStart\n  const endCode = eventCodes.cumulativeRewardsEnd\n\n  return {\n    type: 'call_function',\n    async: true,\n    func: (done) => {\n      // send trigger events\n      let cumulative_reward = 0;\n      let rewards = jsPsych.data.get().select('value').values\n\n      for (let i = 0; i < rewards.length; i++) {\n        let reward = rewards[i]\n        if (blockSettings.is_practice) {\n          if (reward['is_practice'] === true) {\n            cumulative_reward += reward['reward']\n            trialDetails.trial_cumulative_earnings = cumulative_reward\n          }\n        } else {\n          if (reward['is_practice'] === false) {\n            cumulative_reward += reward['reward']\n            trialDetails.trial_cumulative_earnings = cumulative_reward\n          }\n        }\n      }\n\n      trialDetails.subtrial_type = 'cumulative_rewards'\n\n      let stimulus = `<div class=\"effort-container\"><h1>${lang.cumulative_rew.total}${(cumulative_reward).toFixed(2)}</h1>` + photodiodeGhostBox() + `</div>`\n      document.getElementById('jspsych-content').innerHTML = stimulus\n      setTimeout(() => {\n        done(addData(trialDetails,\n                      blockSettings,\n                      opts\n                    ))\n      }, duration);\n\n    },\n    on_load: () => {\n      removeCursor('experiment')\n      pdSpotEncode(startCode)\n    },\n    on_finish: (data) => {\n      pdSpotEncode(endCode)\n      data.code = [startCode, endCode]\n\n    }\n  }\n}\n\nexport default cumulativeReward\n","import { eventCodes, MTURK } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\n\nconst trialEnd = (trialDetails, duration) => {\n    const endCode = eventCodes.trialFinish\n\n    return {\n      type: 'html_keyboard_response',\n      stimulus: '',\n      response_ends_trial: false,\n      trial_duration: duration,\n      on_load: () => {\n      },\n      on_start: (trial) => {\n        if (!MTURK) trial.stimulus += photodiodeGhostBox()\n      },\n      on_finish: (data) => {\n        pdSpotEncode(endCode)\n        data.code = endCode\n      }\n    }\n  }\n\nexport default trialEnd\n","// import trials\nimport fixation from '../trials/fixation'\nimport rewardProbability from '../trials/rewardProbability'\nimport frameSpike from '../trials/frameSpike'\nimport choice from '../trials/choice'\nimport costBenefits from '../trials/costBenefits'\nimport pressBalloon from '../trials/pressBalloon'\nimport rewardFeedback from '../trials/rewardFeedback'\nimport cumulativeReward from '../trials/cumulativeReward'\nimport trialEnd from '../trials/trialEnd'\n\nconst taskTrial = (blockSettings, blockDetails, opts) => {\n  // initialize trial details\n  let trialDetails = {\n    trial_earnings: 0,\n    trial_cumulative_earnings: 0,\n    value: [],\n    effort: [],\n    high_effort: [],\n    probability: [],\n    start_time: Date.now()\n  }\n\n  // timeline\n  let timeline = [\n    // show condition\n    fixation(300),\n    rewardProbability(1000, blockSettings, opts, trialDetails),\n    frameSpike(700, blockSettings, opts, trialDetails),\n    costBenefits(1500, blockSettings, opts, trialDetails),\n    choice(5000, blockSettings, opts),\n    pressBalloon(25000, blockSettings, opts),\n    fixation(500),\n    rewardFeedback(1000, blockSettings, opts, trialDetails),\n    fixation(500),\n    cumulativeReward(1000, blockSettings, blockDetails, opts, trialDetails),\n    // end the trial\n    trialEnd(trialDetails, 500)\n  ]\n    return {\n  \t\ttype: 'html_keyboard_response',\n  \t\ttimeline: timeline\n  \t}\n}\n\nexport default taskTrial\n","import { lang } from '../config/main'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst breakScreen = () => {\n  let stimulus = baseStimulus(`\n    <div class='instructions'>\n    <h1>${lang.break.prompt}\n    </div>\n    `, true)\n\n  return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    prompt:  lang.break.done,\n    response_ends_trial: true\n  }\n}\n\nexport default breakScreen\n","// import trials\nimport { lang } from '../config/main'\nimport breakScreen from '../trials/breakScreen'\nimport buildCountdown from '../trials/countdown'\n\nconst breakTrial = () => {\n\n  let timeline = [\n    breakScreen(),\n    buildCountdown(lang.countdown.post_break_resume, 3)\n  ]\n\n    return {\n  \t\ttype: 'html_keyboard_response',\n  \t\ttimeline: timeline\n  \t}\n}\n\nexport default breakTrial\n","import taskTrial from './taskTrial'\nimport breakTrial from './breakTrial'\nimport { generateStartingOpts } from '../lib/taskUtils'\n\nconst taskBlock = (blockSettings) => {\n  // initialize block\n\tconst startingOpts = generateStartingOpts(blockSettings)\n\n  const blockDetails = {\n\t  block_earnings: 0.0,\n\t\toptimal_earnings: 0.0,\n\t\tcontinue_block: true\n\t}\n\n\t// timeline = loop through trials\n\tlet timeline = startingOpts.map( (opt) => taskTrial(blockSettings, blockDetails, opt))\n\n\tif (blockSettings.num_breaks > 0) {\n\t\tlet breakInterval = Math.floor(timeline.length / (blockSettings.num_breaks + 1))\n\t\tfor (let iBreak = 1; iBreak < blockSettings.num_breaks + 1; iBreak++) {\n\t\t\ttimeline.splice(iBreak*breakInterval, 0, breakTrial())\n\t  }\n\t}\n\n  return {\n\t\ttype: 'html_keyboard_response',\n\t\ttimeline: timeline\n\t}\n}\n\nexport default taskBlock\n","import { lang, AT_HOME, MTURK, eventCodes } from '../config/main'\nimport { jsPsych } from 'jspsych-react'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { formatDollars, addCursor } from '../lib/utils'\n\n\nconst showPayment = (duration, blockSettings) => {\n  const startCode = eventCodes.showPaymentStart\n  const endCode = eventCodes.showPaymentEnd\n\n  let total_earnings = 0 // initialize idk\n  let experimenterKey = blockSettings.keys[2] // 0 is q, 1 is p, 2 is m\n\n  if (!AT_HOME || MTURK) {\n      return {\n      type: 'html_keyboard_response',\n      stimulus: '',\n      choices: experimenterKey,\n      response_ends_trial: true,\n      // trial_duration: duration,\n      on_load: () => {\n        pdSpotEncode(startCode)\n        addCursor('experiment')\n      },\n      on_start: (trial) => {\n        const value = jsPsych.data.get().select('value').values\n        const last = value[value.length - 1]\n        const total_cumulative = last.trial_cumulative_earnings\n        total_earnings += (total_cumulative / 20) // $1 for every 20 pts\n\n        trial.stimulus = baseStimulus(`<h1>${lang.payment.earned}<br>${formatDollars(total_earnings)}<br></br>${lang.payment.experimenter}</h1>`, true) +\n                       photodiodeGhostBox()\n      },\n      on_finish: (data) => {\n        pdSpotEncode(endCode)\n        data.code = [startCode, endCode]\n        data.total_earnings = total_earnings\n        data.subtrial_type = \"show_payment\"\n      }\n    }\n  }\n  else {\n    return {\n    type: 'html_keyboard_response',\n    // trial_duration: 1,\n    on_load: () => addCursor('experiment')\n    }\n  }\n}\nexport default showPayment\n","import { lang, MTURK } from '../config/main'\nimport { getUserId, getTurkUniqueId } from '../lib/utils'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst userId = (blockSettings) => {\n  if (MTURK) {\n    return {\n      type: 'html_keyboard_response',\n      stimulus: baseStimulus(`<h1>${lang.userid.set}</h1>`, true),\n      response_ends_trial: false,\n      trial_duration: 800,\n      on_finish: (data) => {\n        const uniqueId = getTurkUniqueId()\n        console.log(uniqueId)\n      }\n    }\n  }\n  else {\n    return {\n      type: 'survey_text',\n      questions: [{ prompt: baseStimulus(`<h1>${lang.userid.set}</h1>`, true) }],\n      on_finish: (data) => {\n        getUserId(data)\n      }\n    }\n  }\n}\n\nexport default userId\n","import { lang } from '../config/main'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { jsPsych } from 'jspsych-react'\n\nconst recordNow = () => {\n\n  return {\n    type: 'html_keyboard_response',\n    stimulus: '',\n    prompt:  lang.prompt.confirm_recording,\n    response_ends_trial: true,\n\n    on_start: (trial) => {\n    let userId = jsPsych.data.get().select('patient_id').values\n    // console.log(userId)\n\n    trial.stimulus = baseStimulus(`\n      <div class='instructions'>\n      <h1>${lang.prompt.begin_recording}<br>\n      ${lang.prompt.name_eeg_file}<br>\n      ${userId[0]}${lang.prompt.effort_suffix}</h1>\n      </div>\n      `, true)\n    }\n  }\n\n}\n\nexport default recordNow\n","import { defaultBlockSettings } from './main';\nimport { deepCopy } from '../lib/utils'\n\n// FIRST EXPERIMENT BLOCK SETTINGS\n\n// create copy of default settings\nlet exptBlock1 = deepCopy(defaultBlockSettings)\n\nexptBlock1.probs = [\"100%\", \"100%\", \"50%\", \"50%\"]\nexptBlock1.counterbalance = true\nexptBlock1.value = [3, 5, 7]\nexptBlock1.effort = [50, 100, 200] // default vals were: 100, 120, 150\nexptBlock1.keys = ['q', 'p', 'm']\nexptBlock1.get_reward = [true, true, true, false]\nexptBlock1.num_breaks = 3\n\n// debug settings where there are only 2 trials in main task block\n// exptBlock1.probs = [\"100%\"]\n// exptBlock1.counterbalance = true\n// exptBlock1.value = [3]\n// exptBlock1.effort = [5]\n// exptBlock1.keys = ['q', 'p', 'm']\n// exptBlock1.get_reward = [true]\n\n\nexport {\n  exptBlock1\n}\n","import { lang,  MTURK } from '../config/main'\nimport { jsPsych } from 'jspsych-react'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { addCursor } from '../lib/utils'\n\n// quiz helper functions\nconst quizOptions = () => {\n  const arr = [\n    `${lang.quiz.answer_opts.true}`,\n    `${lang.quiz.answer_opts.false}`\n    ]\n  return arr\n}\n\nconst blueOrGreen = [\n  `${lang.quiz.answer_opts.blue}`,\n  `${lang.quiz.answer_opts.green}`\n]\n\nconst quizPrompts = [\n  `${lang.quiz.prompt.more_pumps}`,\n  `${lang.quiz.prompt.reward_certainty_reach_spike}`,\n  `${lang.quiz.prompt.bonus_blue}`,\n  `${lang.quiz.prompt.bonus_green}`,\n  `${lang.quiz.prompt.total_shown}`,\n  `${lang.quiz.prompt.points_to_money}`,\n  `${lang.quiz.retake}`,\n]\n\nconst quizRules = [\n  `${lang.quiz.rules.shown_probability}`,\n  `${lang.quiz.rules.shown_blue_green_on_screen}`,\n  `${lang.quiz.rules.job}`,\n  `${lang.quiz.rules.blue_req_20}`,\n  `${lang.quiz.rules.green_vary_bonus}`,\n  `${lang.quiz.rules.twenty_five_secs_green}`,\n  `${lang.quiz.rules.bonus_green_spike}`,\n  `${lang.quiz.any_questions}`,\n  `${lang.quiz.retake}`\n]\n\n\n// Quiz Trial\nconst quiz = () => {\n\n  const preamble = `<div class=\"quiz_container\">\n                    <h3>${lang.quiz.confirm_understanding}</h3>\n                    </div>`\n\n  let questions = [\n    {\n      prompt: quizPrompts[0],\n      options: blueOrGreen,\n      required: true\n    },{\n      prompt: quizPrompts[1],\n      options: quizOptions(),\n      required: true\n    },{\n      prompt: quizPrompts[2],\n      options: quizOptions(),\n      required: true\n    },{\n      prompt: quizPrompts[3],\n      options: quizOptions(),\n      required: true\n    },{\n      prompt: quizPrompts[4],\n      options: quizOptions(),\n      required: true\n    },{\n      prompt: quizPrompts[5],\n      options: quizOptions(),\n      required: true\n    }\n  ]\n\n  return({\n    type: \"survey_multi_choice\",\n    preamble: preamble,\n    questions: questions,\n    on_load: () => {\n      addCursor('experiment')\n    },\n    on_finish: function(data) {\n      data.uniqueId = 'uniqueId'\n      data.prompt = quizPrompts\n      data.ans_choices = quizOptions()\n      let answer = JSON.parse(data.responses)\n      data.answer = []\n      let len = (MTURK) ? quizPrompts.length + 1 : quizPrompts.length\n      for (let i=0; i<len; i++) {\n        data.answer.push(answer['Q'+i])\n      }\n    }\n  })\n}\n\nconst retakeFeedback = (data) => {\n\n  let feedback = [\n    lang.quiz.incorrect_response + '<br>' +\n    lang.quiz.review\n  ]\n\n  return (\n    {\n      type: 'html_keyboard_response',\n      stimulus: '',\n      response_ends_trial: true,\n      on_load: () => {\n        addCursor('experiment')\n      },\n      on_start: (trial) => {\n        trial.stimulus = baseStimulus(`<h1>${feedback}</h1>`, true)\n      }\n    }\n  )\n}\n\n\nconst reshowRules = () => {\n\n  let rules = [\n    quizRules[0] + '<br></br>' +\n    quizRules[1] + '<br></br>' +\n    quizRules[2] + '<br></br>' +\n    quizRules[3] + '<br></br>' +\n    quizRules[4] + '<br></br>' +\n    quizRules[5] + '<br></br>' +\n    quizRules[6] + '<br></br>' +\n    quizRules[7] + '<br></br>' +\n    quizRules[8]\n  ]\n\n  return (\n    {\n      type: 'html_keyboard_response',\n      stimulus: '',\n      response_ends_trial: true,\n      on_load: () => {\n        addCursor('experiment')\n      },\n      on_start: (trial) => {\n        trial.stimulus = baseStimulus(`<p>${rules}</p>`, true)\n      }\n    }\n  )\n}\n\n\nconst retakeLoop = () => {\n  return {\n    timeline: [\n      retakeFeedback(),\n      reshowRules(),\n      quiz()\n    ],\n    loop_function: (data) => {\n      const prevData = jsPsych.data.getLastTrialData().values()[0]\n      const prevAnswers = prevData.answer\n\n      const correctAnswers = [\n          `${lang.quiz.answer_opts.green}`,\n          `${lang.quiz.answer_opts.false}`,\n          `${lang.quiz.answer_opts.false}`,\n          `${lang.quiz.answer_opts.true}`,\n          `${lang.quiz.answer_opts.true}`,\n          `${lang.quiz.answer_opts.true}`\n        ]\n\n      if (JSON.stringify(prevAnswers.slice(0,6)) !== JSON.stringify(correctAnswers)) {\n        return true\n      } else {\n        return false\n      }\n    }\n  }\n}\n\nconst checkRetake = () => {\n  return {\n    timeline: [\n      retakeLoop(),\n    ],\n    conditional_function: (data) => {\n      const prevData = jsPsych.data.getLastTrialData().values()[0]\n      const prevAnswers = prevData.answer\n\n      const correctAnswers = [\n          `${lang.quiz.answer_opts.green}`,\n          `${lang.quiz.answer_opts.false}`,\n          `${lang.quiz.answer_opts.false}`,\n          `${lang.quiz.answer_opts.true}`,\n          `${lang.quiz.answer_opts.true}`,\n          `${lang.quiz.answer_opts.true}`\n        ]\n\n      if (JSON.stringify(prevAnswers.slice(0,6)) !== JSON.stringify(correctAnswers)) {\n        return true\n      } else {\n        return false\n      }\n    }\n  }\n}\n\n\n// loop function\n// (https://www.jspsych.org/overview/timeline/#looping-timelines)\nlet quizTimeline = () => {\n  return {\n    timeline: [ quiz(), checkRetake() ],\n    type: 'html_keyboard_response'\n  }\n}\n\n\nexport default quizTimeline\n","import buildCountdown from '../trials/countdown'\nimport preamble from './preamble'\nimport experimentStart from '../trials/experimentStart'\nimport experimentEnd from '../trials/experimentEnd'\nimport taskBlock from './taskBlock'\nimport showPayment from '../trials/showPayment'\nimport userId from '../trials/userId'\nimport recordNow from '../trials/recordNow'\nimport { MTURK, lang } from '../config/main'\nimport { practiceBlock1, practiceBlock2, practiceBlock3 } from '../config/practice'\nimport { exptBlock1 } from '../config/experiment'\nimport { bluePracticeInstructions, greenPracticeInstructions, realPracticeInstructions, postPracticeInstructions } from '../trials/instructions'\nimport quizTimeline from '../trials/quizTrials'\n\nconst primaryTimeline = [\n        experimentStart(),\n        userId(),\n        preamble,\n        bluePracticeInstructions(),\n        buildCountdown(lang.countdown.practice1, 3),\n        taskBlock(practiceBlock1),\n        greenPracticeInstructions(),\n        buildCountdown(lang.countdown.practice2, 3),\n        taskBlock(practiceBlock2),\n        realPracticeInstructions(),\n        buildCountdown(lang.countdown.practice3, 3),\n        taskBlock(practiceBlock3),\n        quizTimeline(),\n        recordNow(),\n        postPracticeInstructions(),\n        buildCountdown(lang.countdown.expt1, 3),\n        taskBlock(exptBlock1),\n        showPayment(5000, exptBlock1),\n        experimentEnd(5000)\n        ]\n\nconst mturkTimeline = [\n      experimentStart(),\n      userId(),\n      preamble,\n      bluePracticeInstructions(),\n      buildCountdown(lang.countdown.practice1, 3),\n      taskBlock(practiceBlock1),\n      greenPracticeInstructions(),\n      buildCountdown(lang.countdown.practice2, 3),\n      taskBlock(practiceBlock2),\n      realPracticeInstructions(),\n      buildCountdown(lang.countdown.practice3, 3),\n      taskBlock(practiceBlock3),\n      quizTimeline(),\n      postPracticeInstructions(),\n      buildCountdown(lang.countdown.expt1, 3),\n      taskBlock(exptBlock1),\n      showPayment(5000, exptBlock1),\n      experimentEnd(5000)\n        ]\n\nexport const tl = (MTURK) ? mturkTimeline : primaryTimeline\n","import React from 'react'\nimport { Experiment, jsPsych } from 'jspsych-react'\nimport { tl } from './timelines/main'\nimport { MTURK } from './config/main'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport '@fortawesome/fontawesome-free/css/all.css'\nimport { getTurkUniqueId, sleep } from './lib/utils'\n\nconst isElectron = !MTURK\nlet ipcRenderer = false;\nlet psiturk = false\nif (isElectron) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n} else {\n  /* eslint-disable */\n  window.lodash = _.noConflict()\n  psiturk = new PsiTurk(getTurkUniqueId(), '/complete')\n  /* eslint-enable */\n}\n\nclass App extends React.Component {\n  render() {\n    console.log(\"Outside Turk:\", jsPsych.turk.turkInfo().outsideTurk)\n    console.log(\"Turk:\", MTURK)\n\n    return (\n      <div className=\"App\">\n        <Experiment settings={{\n          timeline: tl,\n          on_data_update: (data) => {\n            if ( ipcRenderer ) {\n              ipcRenderer.send('data', data)\n            }\n            else if (psiturk) {\n                psiturk.recordTrialData(data)\n            }\n          },\n          on_finish: (data) => {\n            if ( ipcRenderer ) {\n              ipcRenderer.send('end', 'true')\n            }\n            else if (psiturk) {\n              const completePsiturk = async () => {\n                psiturk.saveData()\n                await sleep(5000)\n                psiturk.completeHIT()\n              }\n              completePsiturk()\n            }\n          },\n        }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}